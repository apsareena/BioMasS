/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2022-12-08 07:28:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.disk.*;
import org.apache.commons.fileupload.servlet.*;
import org.apache.commons.io.output.*;
import com.biom.*;

public final class fileUpload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("org.apache.commons.fileupload");
    _jspx_imports_packages.add("org.apache.commons.io.output");
    _jspx_imports_packages.add("com.biom");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("org.apache.commons.fileupload.disk");
    _jspx_imports_packages.add("org.apache.commons.fileupload.servlet");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n");
      out.write("<title>File Upload</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write(" ");

  String UPLOAD_DIRECTORY = "upload";
  File file;
 int maxFileSize = 5000 * 1024;
 int maxMemSize = 5000 * 1024;
 //String filePath = "~/";
 
 String filePath = "/home/srm/ew2/BIOMaaS/src/main/webapp/WEB-INF"+ File.separator + UPLOAD_DIRECTORY;
String uploadPath=filePath;
 File uploadDir = new File(uploadPath);
if (!uploadDir.exists()) uploadDir.mkdir();
 String contentType = request.getContentType();
 if ((contentType.indexOf("multipart/form-data") >= 0)) {
  DiskFileItemFactory factory = new DiskFileItemFactory();
  factory.setSizeThreshold(maxMemSize);
  factory.setRepository(new File("upload"));
  ServletFileUpload upload = new ServletFileUpload(factory);
  upload.setSizeMax(maxFileSize);
  try {
   List fileItems = upload.parseRequest(request);
   Iterator i = fileItems.iterator();
  
   
   while (i.hasNext() ) {
  FileItem fi = (FileItem) i.next();
  if (!fi.isFormField() && fi.getSize()>0) {  
   String fieldName = fi.getFieldName();
   String fileName = fi.getName();
   out.write(fileName);
   boolean isInMemory = fi.isInMemory();
   long sizeInBytes = fi.getSize();
   if(fileName!=null || fileName!=""){
   file = new File(filePath + File.separator+ fileName);
   String firstFile = "/"+fileName+" "+fieldName;
   uploadPath+=firstFile;
  out.write(uploadPath); 
   fi.write(file); 
   
 
   
   }
  }
   }
   
   
  } catch (Exception ex) {
   System.out.println(ex);
  }
 } 
 
      out.write('\n');
      out.write(' ');
      out.write('\n');
      out.write("\n");
      out.write(" \n");
      out.write("<!--  public static void unzipFolder(Path source, Path target) throws IOException {\n");
      out.write("\n");
      out.write("        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(source.toFile()))) {\n");
      out.write("\n");
      out.write("            // list files in zip\n");
      out.write("            ZipEntry zipEntry = zis.getNextEntry();\n");
      out.write("\n");
      out.write("            while (zipEntry != null) {\n");
      out.write("\n");
      out.write("                boolean isDirectory = false;\n");
      out.write("                // example 1.1\n");
      out.write("                // some zip stored files and folders separately\n");
      out.write("                // e.g data/\n");
      out.write("                //     data/folder/\n");
      out.write("                //     data/folder/file.txt\n");
      out.write("                if (zipEntry.getName().endsWith(File.separator)) {\n");
      out.write("                    isDirectory = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                Path newPath = zipSlipProtect(zipEntry, target);\n");
      out.write("\n");
      out.write("                if (isDirectory) {\n");
      out.write("                    Files.createDirectories(newPath);\n");
      out.write("                } else {\n");
      out.write("\n");
      out.write("                    // example 1.2\n");
      out.write("                    // some zip stored file path only, need create parent directories\n");
      out.write("                    // e.g data/folder/file.txt\n");
      out.write("                    if (newPath.getParent() != null) {\n");
      out.write("                        if (Files.notExists(newPath.getParent())) {\n");
      out.write("                            Files.createDirectories(newPath.getParent());\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    // copy files, nio\n");
      out.write("                    Files.copy(zis, newPath, StandardCopyOption.REPLACE_EXISTING);\n");
      out.write("\n");
      out.write("                    // copy files, classic\n");
      out.write("                    /*try (FileOutputStream fos = new FileOutputStream(newPath.toFile())) {\n");
      out.write("                        byte[] buffer = new byte[1024];\n");
      out.write("                        int len;\n");
      out.write("                        while ((len = zis.read(buffer)) > 0) {\n");
      out.write("                            fos.write(buffer, 0, len);\n");
      out.write("                        }\n");
      out.write("                    }*/\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                zipEntry = zis.getNextEntry();\n");
      out.write("\n");
      out.write("            }\n");
      out.write("            zis.closeEntry();\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // protect zip slip attack\n");
      out.write("    public static Path zipSlipProtect(ZipEntry zipEntry, Path targetDir)\n");
      out.write("        throws IOException {\n");
      out.write("\n");
      out.write("        // test zip slip vulnerability\n");
      out.write("        // Path targetDirResolved = targetDir.resolve(\"../../\" + zipEntry.getName());\n");
      out.write("\n");
      out.write("        Path targetDirResolved = targetDir.resolve(zipEntry.getName());\n");
      out.write("\n");
      out.write("        // make sure normalized file still has targetDir as its prefix\n");
      out.write("        // else throws exception\n");
      out.write("        Path normalizePath = targetDirResolved.normalize();\n");
      out.write("        if (!normalizePath.startsWith(targetDir)) {\n");
      out.write("            throw new IOException(\"Bad zip entry: \" + zipEntry.getName());\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        return normalizePath;\n");
      out.write("    }\n");
      out.write("    import java.io.File;\n");
      out.write("import java.io.FileInputStream;\n");
      out.write("import java.io.IOException;\n");
      out.write("import java.nio.file.Files;\n");
      out.write("import java.nio.file.Path;\n");
      out.write("import java.nio.file.Paths;\n");
      out.write("import java.nio.file.StandardCopyOption;\n");
      out.write("import java.util.zip.ZipEntry;\n");
      out.write("import java.util.zip.ZipInputStream;\n");
      out.write(" <dependency>\n");
      out.write("      <groupId>net.lingala.zip4j</groupId>\n");
      out.write("      <artifactId>zip4j</artifactId>\n");
      out.write("      <version>2.6.1</version>\n");
      out.write("  </dependency>\n");
      out.write(" \n");
      out.write(" -->\n");
      out.write(" </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
